/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type CreateSessionGlobals = {
    xLog10Organization: string;
};

export type CreateSessionRequest = {
    xLog10Organization?: string | undefined;
};

/**
 * Created
 */
export type CreateSessionResponseBody = {
    session?: components.Session | undefined;
};

export type CreateSessionResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Created
     */
    object?: CreateSessionResponseBody | undefined;
};

/** @internal */
export namespace CreateSessionGlobals$ {
    export const inboundSchema: z.ZodType<CreateSessionGlobals, z.ZodTypeDef, unknown> = z
        .object({
            "X-Log10-Organization": z.string(),
        })
        .transform((v) => {
            return {
                xLog10Organization: v["X-Log10-Organization"],
            };
        });

    export type Outbound = {
        "X-Log10-Organization": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateSessionGlobals> = z
        .object({
            xLog10Organization: z.string(),
        })
        .transform((v) => {
            return {
                "X-Log10-Organization": v.xLog10Organization,
            };
        });
}

/** @internal */
export namespace CreateSessionRequest$ {
    export const inboundSchema: z.ZodType<CreateSessionRequest, z.ZodTypeDef, unknown> = z
        .object({
            "X-Log10-Organization": z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v["X-Log10-Organization"] === undefined
                    ? null
                    : { xLog10Organization: v["X-Log10-Organization"] }),
            };
        });

    export type Outbound = {
        "X-Log10-Organization"?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateSessionRequest> = z
        .object({
            xLog10Organization: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.xLog10Organization === undefined
                    ? null
                    : { "X-Log10-Organization": v.xLog10Organization }),
            };
        });
}

/** @internal */
export namespace CreateSessionResponseBody$ {
    export const inboundSchema: z.ZodType<CreateSessionResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            session: components.Session$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.session === undefined ? null : { session: v.session }),
            };
        });

    export type Outbound = {
        session?: components.Session$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateSessionResponseBody> = z
        .object({
            session: components.Session$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.session === undefined ? null : { session: v.session }),
            };
        });
}

/** @internal */
export namespace CreateSessionResponse$ {
    export const inboundSchema: z.ZodType<CreateSessionResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => CreateSessionResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: CreateSessionResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateSessionResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => CreateSessionResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
