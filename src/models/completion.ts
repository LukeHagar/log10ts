/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    CreateChatCompletionRequest,
    CreateChatCompletionRequest$,
} from "./createchatcompletionrequest";
import {
    CreateChatCompletionResponse,
    CreateChatCompletionResponse$,
} from "./createchatcompletionresponse";
import * as z from "zod";

/**
 * The kind of completion i.e. chat messages or prompt
 */
export enum Kind {
    Chat = "chat",
    Prompt = "prompt",
}

/**
 * The status of this completion.
 */
export enum Status {
    Started = "started",
    Finished = "finished",
    Failed = "failed",
}

export type Stacktrace = {
    /**
     * The file associated with this stacktrace.
     */
    file: string;
    /**
     * The line associated with this stacktrace.
     */
    line: string;
    /**
     * The line number associated with this stacktrace.
     */
    lineno: number;
    /**
     * The function or module associated with this stacktrace.
     */
    name: string;
};

export type Completion = {
    /**
     * The unique identifier for this task.
     */
    id?: string | undefined;
    /**
     * The unique identifier for the organization.
     */
    organizationId: string;
    /**
     * The kind of completion i.e. chat messages or prompt
     */
    kind: Kind;
    /**
     * The status of this completion.
     */
    status?: Status | undefined;
    /**
     * The tags for this completion.
     */
    tags?: Array<string> | undefined;
    request?: CreateChatCompletionRequest | undefined;
    /**
     * Represents a chat completion response returned by model, based on the provided input.
     */
    response?: CreateChatCompletionResponse | undefined;
    /**
     * The stacktrace for this completion.
     */
    stacktrace?: Array<Stacktrace> | undefined;
    /**
     * The session id for this completion.
     */
    sessionId?: string | undefined;
    /**
     * The duration of this completion in seconds.
     */
    duration?: number | undefined;
    /**
     * The failure kind of this completion.
     */
    failureKind?: string | undefined;
    /**
     * The failure reason of this completion.
     */
    failureReason?: string | undefined;
};

/** @internal */
export namespace Kind$ {
    export const inboundSchema = z.nativeEnum(Kind);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Status$ {
    export const inboundSchema = z.nativeEnum(Status);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Stacktrace$ {
    export const inboundSchema: z.ZodType<Stacktrace, z.ZodTypeDef, unknown> = z
        .object({
            file: z.string(),
            line: z.string(),
            lineno: z.number(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                file: v.file,
                line: v.line,
                lineno: v.lineno,
                name: v.name,
            };
        });

    export type Outbound = {
        file: string;
        line: string;
        lineno: number;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Stacktrace> = z
        .object({
            file: z.string(),
            line: z.string(),
            lineno: z.number(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                file: v.file,
                line: v.line,
                lineno: v.lineno,
                name: v.name,
            };
        });
}

/** @internal */
export namespace Completion$ {
    export const inboundSchema: z.ZodType<Completion, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string().optional(),
            organization_id: z.string(),
            kind: Kind$.inboundSchema,
            status: Status$.inboundSchema.optional(),
            tags: z.array(z.string()).optional(),
            request: CreateChatCompletionRequest$.inboundSchema.optional(),
            response: CreateChatCompletionResponse$.inboundSchema.optional(),
            stacktrace: z.array(z.lazy(() => Stacktrace$.inboundSchema)).optional(),
            session_id: z.string().optional(),
            duration: z.number().optional(),
            failure_kind: z.string().optional(),
            failure_reason: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                organizationId: v.organization_id,
                kind: v.kind,
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.request === undefined ? null : { request: v.request }),
                ...(v.response === undefined ? null : { response: v.response }),
                ...(v.stacktrace === undefined ? null : { stacktrace: v.stacktrace }),
                ...(v.session_id === undefined ? null : { sessionId: v.session_id }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.failure_kind === undefined ? null : { failureKind: v.failure_kind }),
                ...(v.failure_reason === undefined ? null : { failureReason: v.failure_reason }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        organization_id: string;
        kind: string;
        status?: string | undefined;
        tags?: Array<string> | undefined;
        request?: CreateChatCompletionRequest$.Outbound | undefined;
        response?: CreateChatCompletionResponse$.Outbound | undefined;
        stacktrace?: Array<Stacktrace$.Outbound> | undefined;
        session_id?: string | undefined;
        duration?: number | undefined;
        failure_kind?: string | undefined;
        failure_reason?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Completion> = z
        .object({
            id: z.string().optional(),
            organizationId: z.string(),
            kind: Kind$.outboundSchema,
            status: Status$.outboundSchema.optional(),
            tags: z.array(z.string()).optional(),
            request: CreateChatCompletionRequest$.outboundSchema.optional(),
            response: CreateChatCompletionResponse$.outboundSchema.optional(),
            stacktrace: z.array(z.lazy(() => Stacktrace$.outboundSchema)).optional(),
            sessionId: z.string().optional(),
            duration: z.number().optional(),
            failureKind: z.string().optional(),
            failureReason: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                organization_id: v.organizationId,
                kind: v.kind,
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.request === undefined ? null : { request: v.request }),
                ...(v.response === undefined ? null : { response: v.response }),
                ...(v.stacktrace === undefined ? null : { stacktrace: v.stacktrace }),
                ...(v.sessionId === undefined ? null : { session_id: v.sessionId }),
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.failureKind === undefined ? null : { failure_kind: v.failureKind }),
                ...(v.failureReason === undefined ? null : { failure_reason: v.failureReason }),
            };
        });
}
